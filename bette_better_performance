clear board; clear all;
% Initialize the Arduino board. 4178 Loops at branch from int_to_double.m

board = serialport("COM5",115200);
configureTerminator(board,"CR/LF");
flush(board);

data0 = 0;
data1 = 0;
time = 0;

% Scalars
tlag = 0; % Total lag gotten from peaks
ntlag = 0; % negative waveform, Total lag from troughs
dtlag = 0; % Derivative, Total lag from derivitive peaks
ndtlag = 0; % troughs of derivative
sync = 0;
tol = 0.05;

% % Loop control
duration = 10; % Time of demonstration
stepTime = 0.001; % Time interval between consecutive data reads.
% samples = duration/stepTime; % Total number of data samples to be recorded.
% 
prev_0strokes = 0;
prev_1strokes = 0;
prev_0dstrokes = 0;
prev_1dstrokes = 0;

% Indices
dataIndex = 1;
locIndex = 1;
dlocIndex = 1;
% 
% % Array Definitions
t = zeros(1,1000*duration); % Array to track each looped peaks time difference
nt = zeros(1,1000); % Array to track each looped trough time difference
dt = zeros(1,1000); % Array to track each looped derivitive time difference
A0Array = zeros(1,1000*duration);
A1Array = zeros(1,1000*duration);
Tstamp = zeros(1,1000*duration);
pbool0 = zeros(1,1000*duration);
pbool1 = zeros(1,1000*duration);

% Initialize live plot

% subplot(2, 1, 1);

hold on
line0 = animatedline('Color','r','MaximumNumPoints',1000000);
line1 = animatedline('Color','b','MaximumNumPoints',1000000);
xlim([0,10]);
title("Recorded Data");
xlabel("Time (millisec)");
ylim([0,5000]);
legend('Signal 0', 'Signal 1');

% subplot(2, 1, 2);
% line2 = animatedline('Color','green','MaximumNumPoints',1000000);% Used to be time_diff
% % ylim([-2,2]);
% title("Time Lag");
% xlabel("Time");
% subplot(3, 1, 3)
% line3 = line(start-start,dtlag,'Color','magenta');
% title("Time Lag from Derivative");

% Ideas to speed up:
% take derivative every x loops: idx%x =0 -- DONE -> Test1
% take time data from matlab instead of arduino
% Find derivative peaks after looping
% or take derive if time diff of peaks is above a threshold
% or only findpeaks of deriv bc the zero of deriv is the pressure peak->get
% ->index of the zero region
% if new ploc find gradient between old ploc and new, update ploc
% simply find the slope of rising base to peak and peak to falling base
% if data0/1 >= threshold -> take derivative --- CURRENT
flush(board);
tObj = tic; %Start Timer
while (true)%(time<=duration*1000)

%     write(board,'a','char');
    

%     if mod(dataIndex,3)==0
    data = read(board,3,'uint32'); %Sending three 4-byte long ints so read as 3 uint32
    data0 = data(1);
    data1 = data(2);
    time = data(3);
%     end
    time

    A0Array(dataIndex) = data0;
    Tstamp(dataIndex) = time/1000;
    A1Array(dataIndex) = data1;

%     if (data0 || data1)>2500

%     deriv0 = gradient(A0Array);
%     deriv1 = gradient(A1Array);
%     [dpeaks0, dploc0] = findpeaks(deriv0,"MinPeakDistance",60,'MinPeakHeight',max(deriv0)-3*std(deriv0));%,'MinPeakProminence',1.5);
%     [dpeaks1, dploc1] = findpeaks(deriv1,"MinPeakDistance",60,'MinPeakHeight',max(deriv1)-3*std(deriv1));%,'MinPeakProminence',1.5);
        % maybe get ndpeaks from the width of peak + dploc?
        %ex: ndploc0 = dploc0 + Tstamp(find(Tstamp == w0));
%         [ndpeaks0, ndploc0] = findpeaks(-deriv0,"MinPeakDistance",60);%,'MinPeakHeight',max(-deriv0)-3*std(-deriv0),'MinPeakProminence',1);%,'MinPeakProminence',0.1);
%         [ndpeaks1, ndploc1] = findpeaks(-deriv1,"MinPeakDistance",60);%,'MinPeakHeight',max(-deriv1)-3*std(-deriv1),'MinPeakProminence',1);%,'MinPeakProminence',0.1);
%     end


%     % Find edges of curves
    pbool0L = (tol*max(A0Array)<A0Array);
    pbool0G = (A0Array>min(A0Array));
    pbool0 = pbool0L.*pbool0G;
    pbool0 = [false,pbool0,false];
    pstart0 = strfind(pbool0,[0 1]);
    pend0 = strfind(pbool0,[1 0]);
    pbool1L = (tol*max(A1Array)<A1Array);
    pbool1G = (A1Array>min(A1Array));
    pbool1 = pbool1L.*pbool1G;
    pbool1 = [false,pbool1,false];
    pstart1 = strfind(pbool1,[0 1]);
    pstart0 = pstart0 - 1;
    pstart1 = pstart1 - 1;
    pend1 = strfind(pbool1,[1 0]);

%      %Find Peaks
    [peaks0, ploc0] = findpeaks(A0Array);%,"MinPeakDistance",6,'MinPeakHeight',max(A0Array)-std(A0Array));%,'MinPeakProminence',3);%;%max(A0Array)-2*std(A0Array),'WidthReference','halfheight');
    [peaks1, ploc1] = findpeaks(A1Array);%,"MinPeakDistance",6,'MinPeakHeight',max(A1Array)-std(A0Array));%,'MinPeakProminence',3);%2*std(A0Array),'WidthReference','halfheight');

%     % Troughs
% %     [npeaks0, nploc0] = findpeaks(-A0Array,"MinPeakDistance",4,'MinPeakHeight',max(-A0Array)-2*std(-A0Array),'MinPeakProminence',0.1);
% %     [npeaks1, nploc1] = findpeaks(-A1Array,"MinPeakDistance",4,'MinPeakHeight',max(-A1Array)-2*std(-A1Array),'MinPeakProminence',0.1);
    

    num_strokes0 = length(ploc0);
    num_strokes1 = length(ploc1);
% %     dnum_strokes0 = length(dploc0);
% %     dnum_strokes1 = length(dploc1);
% % 
    if ~isempty(ploc0)&&~isempty(ploc1)
        if (num_strokes1>prev_1strokes)||(num_strokes0>prev_0strokes)
            if length(ploc0)==length(ploc1)
                tlag = tlag + (Tstamp(ploc1(locIndex)) - Tstamp(ploc0(locIndex)));
                t(dataIndex) = Tstamp(ploc1(locIndex))-Tstamp(ploc0(locIndex));
                locIndex = locIndex + 1;
            else
                tlag = tlag + (Tstamp(ploc1(end)) - Tstamp(ploc0(end)));
                locIndex = max(length(ploc1),length(ploc0));

            end
            prev_0strokes = num_strokes0;
            prev_1strokes = num_strokes1;
% %             if ~(isempty(nploc1)&&isempty(nploc0))
% %                 ntlag = ntlag + (Tstamp1(nploc1(end)) - Tstamp(nploc0(end)));
% %                 nt(dataIndex) = Tstamp1(nploc1(end))-Tstamp(nploc0(end));
% %             end
        end%new
    end%new
% % 
%     if ~isempty(dploc0)&&~isempty(dploc1)%length(ploc0)>=2
%         disp("Find dtlag")
%         tic
%         if (dnum_strokes1>prev_1dstrokes)||(dnum_strokes0>prev_0dstrokes)
%             if (length(dploc0)||length(dploc1))==dlocIndex
% %                 tlag = tlag + (ploc1(end) - ploc0(end) + (dploc1(end) - dploc0(end)))/2;
%                 dtlag = dtlag + (Tstamp(dploc1(dlocIndex)) - Tstamp(dploc0(dlocIndex)));
%                 dt(dataIndex) = Tstamp(dploc1(dlocIndex)) - Tstamp(dploc0(dlocIndex));
%                 dlocIndex = dlocIndex + 1;
%             else
%                 dtlag = dtlag + (Tstamp(dploc1(end)) - Tstamp(dploc0(end)));
%                 dt(dataIndex) = Tstamp(dploc1(end)) - Tstamp(dploc0(end));
%                 %ndtlag = ndtlag + (Tstamp1(ndploc1(end)) - Tstamp(ndploc0(end)));
%                 dlocIndex = max(length(dploc1),length(dploc0));
%             prev_0dstrokes = dnum_strokes0;
%             prev_1dstrokes = dnum_strokes1;
% 
%             end
%         end
%     end
%     toc
    
%     pause(stepTime*50);
%     subplot(2, 1, 1);
%     if mod(time,5000)==0
%         flush(board);
%         clearpoints(line0);
%         clearpoints(line1);
% %         clearpoints(line2);
%         drawnow;
%     end
    addpoints(line0,Tstamp(dataIndex),data0);
    addpoints(line1,Tstamp(dataIndex),data1);
%     pause(stepTime);
% % 
%     subplot(2, 1, 2);
% %     addpoints(line2,time,data1-data0);
%     addpoints(line2,Tstamp(dataIndex),tlag);

%     subplot(3, 1, 3);

%     ARD_DATA_1 = timetable(A0Array',A1Array','TimeStep',seconds(stepTime)); This Works
%     plot(ARD_DATA_1.Time, ARD_DATA_1.Variables);
%     axis([0, (time/1000+1), 0 , 5 ]);
    drawnow limitrate %nocallbacks
%     if board.NumBytesAvailable>
    flush(board);
    pause(0.005);
%     flush(board);
    dataIndex = dataIndex + 1;

end

dataIndex
t = nonzeros(t);
avg = mean(t);
maxi = max(t); % Maximum instantaneous lag in seconds
mini = min(t);
sumt = sum(ndtlag); % total Time lag in seconds
% 
% freq0 = length(peaks0)/timer % Number of strokes
% freq1 = length(peaks1)/timer
% ppos0 = length(ploc0);
% ppos1 = length(ploc1);

% Show peaks on plot

% figure;
% plot(A0Array,"Color",'blue');
% plot(Tstamp,deriv0,"Color",'red');
% hold on
% plot(A1Array,"Color",'cyan')
% plot(Tstamp,deriv1,"Color",'blue')
% % plot(ploc0,peaks0,'r^')
% % plot(ploc1,peaks1,'g^')
% plot(dploc0,dpeaks0,'g^')
% plot(dploc1,dpeaks1,'r^')
% plot(ndploc0,-ndpeaks0,'g^')
% plot(ndploc1,-ndpeaks1,'r^')
% 
% % Plot of curves with profile markings
% figure; 
% plot(Tstamp,A0Array,"Color",'red'); hold on; plot(Tstamp(ploc0),peaks0,'go');
% plot(Tstamp,A1Array,"Color",'blue'); plot(Tstamp(ploc1),peaks1,'mo');
% plot(Tstamp(dploc0),dpeaks0,'g^'); plot(Tstamp(dploc1),dpeaks1,'m^'); 
% % plot(Tstamp(ndploc0),ndpeaks0,'gv'); plot(Tstamp(ndploc1),ndpeaks1,'mv'); 
% plot(Tstamp(pstart0),A0Array(pstart0),'g>',Tstamp(pend0),A0Array(pend0),'g<');
% plot(Tstamp(pstart1),A1Array(pstart1),'m>',Tstamp(pend1),A1Array(pend1),'m<');
% % 
% for k = 1:length(ploc0)
%     sync(k) = (Tstamp1(ploc1(k)) - Tstamp(ploc0(k))) + (Tstamp1(dploc1(k)) - Tstamp(dploc0(k))) + (Tstamp1(ndploc1(k)) - Tstamp(ndploc0(k)));
% end
avg
maxi
mini
sumt
tlag
dtlag
ndtlag
idx = find(t==mini);
time_of_min = (idx);
time_of_min
sum(sync)/3
% 
% hold off


clear all;
%SADC(abs(SADC-mean(SADC))<2*std(SADC)) = 0; %!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
